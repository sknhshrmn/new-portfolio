[
  {
    "id": 1,
    "title": "HRMS Time Attendance Module",
    "type": "Backend",
    "description": "Developed a Time Attendance Module as a new feature within the existing HR Management System (HRMS) to track employee attendance, and manage shift.",
    "techStack": [
      {
        "name": "Laravel (PHP)",
        "description": "PHP framework for backend development"
      },
      {
        "name": "MySQL",
        "description": "Relational database for attendance data storage"
      },
      {
        "name": "AWS EC2",
        "description": "Cloud server used for staging and production deployments"
      },
      {
        "name": "Laravel Queue",
        "description": "Job queue management for background processing"
      },
      {
        "name": "RESTful API",
        "description": "Standard API design for backend communication"
      },
      {
        "name": "Bruno",
        "description": "API client for testing and debugging"
      },
      {
        "name": "PHPUnit",
        "description": "Testing framework for PHP applications"
      },
      {
        "name": "PHPStan",
        "description": "Static analysis tool for improving PHP code quality"
      }
    ],
    "users": ["HR Admin", "Employees"],
    "keyFeatures": [
      "Clock-in/out functionality – Enables employees to record attendance accurately.",
      "Attendance tracking – Provides real-time attendance data for staff and admins.",
      "Shift management – Allows dynamic customization of shifts and working hours.",
      "Overtime calculations – Automates overtime tracking and calculations.",
      "Attendance status categories – Ongoing, Absent, Present, Late, Incomplete, Late & Incomplete, On Leave."
    ],
    "status": "First version deployed with clock-in/out features. Currently refining shift management, and fixing bugs.",
    "problem_solution": {
      "problem": [
        "Seamless integration of the Time Attendance Module with HRMS.",
        "Efficient processing of large attendance datasets.",
        "Real-time and accurate attendance status updates.",
        "Automating complex shift scheduling with minimal manual input."
      ],
      "solution": [
        "Optimized API calls and queries for smooth HRMS integration.",
        "Used job processing to handle large data efficiently, reducing system load.",
        "Automated attendance status updates with a cron job and logic.",
        "Conducted extensive testing to ensure shift scheduling reliability."
      ]
    },
    "impact": [
      "Deployed a Time Attendance module in HRMS.",
      "Automated tracking, reducing manual errors.",
      "Optimized key-based data retrieval for efficiency.",
      "Used cron jobs for real-time status updates.",
      "Enhanced HRMS adoption by eliminating third-party reliance."
    ],
    "my_role": [
      "Designed the attendance tracking database schema (ERD).",
      "Developed APIs for clock-in/out, shift management, and tracking.",
      "Implemented attendance status logic alongside with cron jobs.",
      "Validated data and conducted integration testing.",
      "Collaborated with frontend for seamless API integration."
    ],
    "key_takeaways": {
      "technical_growth": [
        "Gained hands-on experience in Laravel backend development.",
        "Improved database query optimization and API performance.",
        "Handled large-scale data processing using queues.",
        "Enhanced debugging and troubleshooting skills."
      ],
      "professional_growth": [
        "Solved challenges integrating with legacy systems.",
        "Improved collaboration with frontend developers.",
        "Learned best practices for API documentation and handovers."
      ]
    },
    "current_status": {
      "development": "First version deployed with working clock-in/out, attendance list, and shift management. Phase two is in progress to fix bugs and improve functionality.",
      "next_steps": [
        "Enhance shift management",
        "Resolve remaining legacy bugs",
        "Finalize deployment as a TENCENT partner"
      ]
    }
  },
  {
    "id": 2,
    "title": "PactOnline - B2B, Will Management & Ticketing System (Built with Next.js)",
    "type": "Frontend",
    "description": "A frontend application developed for Pacific Trustee Company to facilitate B2B interactions, will management, and ticketing for agents, partners, admins, and staff. My focus was primarily on the B2B platform and will management system.",
    "techStack": [
      {
        "name": "Next.js",
        "description": "React framework for server-side rendering and optimized performance"
      },
      {
        "name": "React.js",
        "description": "Component-based UI development for a responsive frontend"
      },
      {
        "name": "Tailwind CSS",
        "description": "Utility-first CSS framework for styling and responsive design"
      },
      {
        "name": "Axios",
        "description": "HTTP client for seamless API communication"
      },
      {
        "name": "React Hook Form",
        "description": "Form validation and state management with minimal re-renders"
      },
      {
        "name": "TanStack Query",
        "description": "Efficient data fetching, caching, and synchronization for React applications"
      }
    ],
    "users": [
      "Agents",
      "Partners",
      "Admins",
      "Pacific Trustee Staff",
      "Client"
    ],
    "keyFeatures": [
      "B2B Platform for Will Sales",
      "Will Management System for Clients & Admins",
      "Ticketing System for Issue Tracking",
      "Progress Tracking for Will Processing",
      "Responsive Mobile-Friendly UI",
      "Efficient API Integration"
    ],
    "status": "Part of the frontend team from February 2024 to November 2024. Transitioned out of the team after November 2024.",
    "problem_solution": {
      "problem": [
        "Custom features were requested outside the original user stories, requiring analysis.",
        "Developing a flexible Will Builder template to meet diverse client needs.",
        "Lack of detailed user stories led to delays and required client clarification."
      ],
      "solution": [
        "Analyzed custom feature requests and clarified with the client when needed.",
        "Built a flexible Will Builder template to accommodate different client needs.",
        "Worked closely with the client to ensure smooth integration of new features."
      ]
    },
    "impact": [
      "Streamlined will management for faster and more organized processes.",
      "Improved tracking and transparency for admins and clients.",
      "Created a user-friendly, responsive interface.",
      "Initiated the development of a complex feature, passed to the next developer."
    ],
    "my_role": [
      "Developed frontend components in React.js and Next.js.",
      "Implemented state management using React hooks (useState, useReducer, custom hooks).",
      "Integrated REST APIs with Axios for seamless backend communication.",
      "Translated Figma designs into responsive web components for consistent UI/UX.",
      "Collaborated with backend developers to optimize API performance.",
      "Used TanStack Query for efficient data fetching and caching.",
      "Implemented form validation with React Hook Form and integrated validation libraries.",
      "Designed UI components with ShadCN to maintain a consistent design system."
    ],
    "key_takeaways": {
      "technical_growth": [
        "Deepened expertise in React.js and Next.js.",
        "Improved form handling and validation with React Hook Form.",
        "Enhanced knowledge in optimizing API calls and data fetching."
      ],
      "professional_growth": [
        "Strengthened collaboration with backend developers and designers.",
        "Gained experience in team workflows.",
        "Balanced business needs with technical solutions.",
        "Improved client communication skills through meetings and handling custom requests."
      ]
    },
    "current_status": {
      "development": "Live after the first phase, with bug fixes and database migrations handled by the new team.",
      "next_steps": [
        "Migrate the database for future updates.",
        "Deploy updates to production.",
        "Address any bugs reported by client."
      ],
      "note": "I transitioned out of the team after the initial phase, and the ongoing tasks are now managed by another developer."
    },
    "screenshots": [
      {
        "caption": "Will Submission Form",
        "url": "/images/pactonline/0.png"
      },
      {
        "caption": "Complex Form with Nested Fields",
        "url": "/images/pactonline/1.png"
      },
      {
        "caption": "Admin Progress Tracking",
        "url": "/images/pactonline/2.png"
      },
      {
        "caption": "Client Will Submission Page",
        "url": "/images/pactonline/3.png"
      },
      {
        "caption": "Client Information Table",
        "url": "/images/pactonline/4.png"
      },
      {
        "caption": "Mobile View",
        "url": "/images/pactonline/5.png"
      },
      {
        "caption": "Client Progress Tracking",
        "url": "/images/pactonline/6.png"
      }
    ],
    "thumbnail": "/images/pactonline/2.png"
  },
  {
    "id": 3,
    "title": "Database Management & Reporting System for Service Engineers (Built with Django)",
    "type": "Full-Stack",
    "description": "A powerful internal app that streamlines service reports, manages chamber data, and enhances customer tracking for better efficiency and security.",
    "techStack": [
      {
        "name": "Django",
        "description": "Full-stack framework for backend logic, templating, and security"
      },
      {
        "name": "PostgreSQL",
        "description": "Relational database optimized for structured service data"
      },
      {
        "name": "JavaScript",
        "description": "Enhancing UI with dynamic interactions and AJAX updates"
      },
      {
        "name": "Bootstrap",
        "description": " Responsive UI for better user experience"
      },
      {
        "name": "Django Translation Package",
        "description": "Provides multilingual support (English & German) using Django's translation framework"
      }
    ],
    "users": ["Service Engineers", "Database Admins", "Stockist"],
    "keyFeatures": [
      "Centralized Database",
      "Role-Based Access Control",
      "Automated Report ID Issuance",
      "Asynchronous Data Fetching",
      "Django Admin Panel",
      "Bilingual Support (English & German)"
    ],
    "status": "Under testing & refinement.",
    "problem_solution": {
      "problem": [
        "Scattered service data across multiple files.",
        "Manual tracking of Service Report IDs leading to errors.",
        "Page reloads required for CRUD operations.",
        "Users needed support for multiple languages."
      ],
      "solution": [
        "Built a structured database for easy access.",
        "Automated Service Report ID generation.",
        "Implemented async fetching for real-time updates.",
        "Integrated Django's built-in translation framework to support English & German."
      ]
    },
    "impact": [
      "Faster data retrieval.",
      "Reduced manual errors.",
      "Async fetching for real-time updates.",
      "Improved UI/UX for smoother interactions.",
      "Support for English and German languages."
    ],
    "my_role": [
      "Designed and developed both backend (Django, PostgreSQL) and frontend.",
      "Implemented efficient database structures and optimized queries for performance.",
      "Improved API response times for a smoother user experience.",
      "Handled bug fixes, feature expansions, and system refinements.",
      "Added bilingual support using Django's translation system."
    ],
    "key_takeaways": {
      "technical_growth": [
        "First attempt at developing a full web application using Django.",
        "Applied MVC (MVT) architecture for structured development.",
        "Implemented OOP principles for scalable and maintainable code.",
        "Optimized database queries using Django ORM."
      ],
      "professional_growth": [
        "Handled real-world user feedback and iterative improvements.",
        "Balanced business and technical needs while working independently.",
        "Improved user experience based on feedback, enhancing UI/UX and system usability."
      ]
    },
    "current_status": {
      "development": "Under testing and refinement.",
      "next_steps": ["Feature enhancements.", "Advanced reporting integration."]
    },
    "screenshots": [
      { "caption": "Homepage (English)", "url": "/images/django/homepage.png" },
      {
        "caption": "The web app in German",
        "url": "/images/django/in-german.png"
      },
      {
        "caption": "Translation Manager",
        "url": "/images/django/translation-manager.png"
      },
      {
        "caption": "Global Search Function",
        "url": "/images/django/global-search-function.png"
      },
      { "caption": "Feedback Form", "url": "/images/django/feedback-form.png" },
      {
        "caption": "Language Selection",
        "url": "/images/django/change-language.png"
      },
      {
        "caption": "Documents Page",
        "url": "/images/django/documents-page.png"
      },
      { "caption": "Admin Panel", "url": "/images/django/admin-panel.png" }
    ],
    "thumbnail": "/images/django/homepage.png"
  }
]
